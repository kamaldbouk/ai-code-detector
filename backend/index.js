const express = require("express");
const bodyParser = require("body-parser");
const simpleGit = require("simple-git");
const fs = require("fs");
const path = require("path");
const os = require("os");
const rimraf = require("rimraf");
const cors = require("cors");

const app = express();
app.use(bodyParser.json());
app.use(cors());

// --- Simple AI detection heuristics ---
function analyzeCode(code) {
  let score = 0;

  // Heuristic 1: Look for "copilot" or "generated by"
  if (code.toLowerCase().includes("copilot") || code.toLowerCase().includes("generated by")) {
    score += 50;
  }

  // Heuristic 2: Lots of comments
  const comments = (code.match(/(#|\/\/|\/\*)/g) || []).length;
  if (comments > 10) score += 15;

  // Heuristic 3: Docstrings / block comments
  if (/""".+?"""/s.test(code) || /\/\*[\s\S]*?\*\//.test(code)) {
    score += 15;
  }

  // Heuristic 4: Many functions
  const functions = (code.match(/\bfunction\b|\bdef\b/g) || []).length;
  if (functions > 10) score += 20;

  return Math.min(score, 100);
}

app.post("/analyze", async (req, res) => {
  const { url } = req.body;

  if (!url) return res.status(400).json({ error: "Repository URL required" });

  const tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), "repo-"));

  try {
    const git = simpleGit();
    await git.clone(url, tmpDir);

    let totalScore = 0;
    let fileCount = 0;
    let results = {};

    function walk(dir) {
      const files = fs.readdirSync(dir);
      for (let file of files) {
        const filepath = path.join(dir, file);
        const stat = fs.statSync(filepath);
        if (stat.isDirectory()) {
          walk(filepath);
        } else {
          if (/\.(js|ts|py|java|cpp|c)$/.test(file)) {
            const code = fs.readFileSync(filepath, "utf8");
            const score = analyzeCode(code);
            results[filepath.replace(tmpDir, "")] = score;
            totalScore += score;
            fileCount++;
          }
        }
      }
    }

    walk(tmpDir);

    const repoScore = fileCount ? (totalScore / fileCount).toFixed(2) : 0;
    res.json({ repo_score: repoScore, files: results });
  } catch (err) {
    res.status(500).json({ error: err.message });
  } finally {
    rimraf.sync(tmpDir);
  }
});

app.listen(8080, () => {
  console.log("âœ… Backend running on http://localhost:8080");
});
